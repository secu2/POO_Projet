options { 
	DEBUG_PARSER=false; 
	STATIC=false; 
} 
PARSER_BEGIN(Compiler) 
package grammaire.genere;

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.List;
import java.util.ArrayList;
import grammaire.instructions.*;
import machine.adressage.*;


public class Compiler { 

	/** Compilation d'un fichier de combattant 
	* @param s : le nom du fichier 
	* @throws Exception une erreur de lecture 
	*/ 

 	public static void compile(String s) throws Exception { 
		FileReader r = new FileReader(s); 
		Compiler parser = new Compiler(new BufferedReader(r)); 
		List < Instruction > code = parser.Instructions();
		//return code;
	}  

	private void skiptoEOL(){while(token.kind!=EOL||token.kind!=CEOL) getNextToken();} 

	} 

 

PARSER_END(Compiler) 


SKIP :  //Ignorer:
{ 

 " "
 | "\t"
 | "\""
 | "\\" 
 | "!"
 | "%"
 | "&"
 | "'"
 | "*"
 | "."
 | "/"
 | ";"
 | "<"
 | ">"
 | "="
 | "?"
 | "["
 | "]" 
 | "^"
 | "`"
 | "{"
 | "}"
 | "~"
 | "|"



| "\u0000" | "\u0001" | "\u0002" | "\u0003" | "\u0004" | "\u0005" | "\u0006" | "\u0007" 

| "\u0008" | "\u000B" | "\u000C" | "\u000E" | "\u000F" | "\u0010" | "\u0011" | "\u0012" 

| "\u0013" | "\u0014" | "\u0015" | "\u0016" | "\u0017" | "\u0018" | "\u0019" | "\u001A" 

| "\u001B" | "\u001C" | "\u001D" | "\u001E" | "\u001F" | "\u007F" 

}



// Fin de ligne:

TOKEN:{<EOL: "\n" | "\r" | "\r\n">} 

// Commentaire

SPECIAL_TOKEN :{"//" : IN_SL_COMMENT} 

<IN_SL_COMMENT> TOKEN :{<CEOL: <EOL>> : DEFAULT} 

<IN_SL_COMMENT> SKIP :{< ~[] >} 

// Adressage

TOKEN : /* ADRESSAGE */
{
  < IMM : "#">
| < NUM : "$">
| < IND : "@">
}

TOKEN :
{
  < PLUS : "+" >
| < MOINS : "-" >
| < VALUE : (< DIGIT >)+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* OPERATEURS */
{
  < DAT : "DAT" >
| < MOV : "MOV" >
| < ADD : "ADD" >
| < SUB : "SUB" >
| < MUL : "MUL" >
| < DIV : "DIV" >
| < MOD : "MOD" >
| < JMP : "JMP" >
| < JMZ : "JMZ" >
| < JMN : "JMN" >
| < DJN : "DJN" >
| < CMP : "CMP" >
| < SLT : "SLT" >
}


//BEGIN RÃ¨gles de grammaire:

List<Instruction> Instructions() throws Exception :
{
  	List<Instruction> inst = new ArrayList();
	Instruction courante;
} 
{
  (    
     courante = Instruction()
     < EOL >
     {inst.add(courante);}
  )*
     < EOF >
  	{return inst;}
}


Instruction Instruction() throws Exception :
{
  Token operation;  Adresse operande1;  Adresse operande2;
}
{
  	operation = < DAT > operande1 = operande(){
		return new DAT(operande1);
	}
| operation = < MOV > operande1 = operande() operande2 = operande(){
  	return new MOV(operande1, operande2);
  }
| operation = < ADD > operande1 = operande() operande2 = operande(){
  	return new ADD(operande1, operande2);
  }
| operation = < SUB > operande1 = operande() operande2 = operande(){
  	return new SUB(operande1, operande2);
  }
| operation = < MUL > operande1 = operande() operande2 = operande(){
  	return new MUL(operande1, operande2);
  }
| operation = < DIV > operande1 = operande() operande2 = operande(){
  	return new DIV(operande1, operande2);
  }
| operation = < MOD > operande1 = operande() operande2 = operande(){
  	return new MOD(operande1, operande2);
  }
| operation = < JMP > operande1 = operande(){
  	return new JMP(operande1);
  }
| operation = < JMZ > operande1 = operande() operande2 = operande(){
  	return new JMZ(operande1, operande2);
  }
| operation = < JMN > operande1 = operande() operande2 = operande(){
  	return new JMN(operande1, operande2);
  }
| operation = < DJN > operande1 = operande() operande2 = operande(){
  	return new DJN(operande1, operande2);
  }
| operation = < CMP > operande1 = operande() operande2 = operande(){
  	return new CMP(operande1, operande2);
  }
| operation = < SLT > operande1 = operande() operande2 = operande(){
  	return new SLT(operande1, operande2);
  }
 }


Adresse operande() :
{
  Token op;
  Integer val;
}
{
  ( op = < IMM >
  | op = < NUM >
  | op = < IND > )
  val = Entier(){
    switch (op.kind){
		case IMM : {
		  return new Immediat(val);
		  break;
		}
      	case NUM : {
      	  return new Immediat(val);
      	  break;
      	}
      	case IND : {
      	  return new Immediat(val);
      	  break;
      	}
	}
  }
	| val = Entier(){
	  return new Immediat(val);
	}
}

Integer Entier(): {
  Token valeur, signe;
}
{
  	< PLUS > valeur = < VALUE > {
    	return Integer.parseInt(valeur.image);
  	}
	| < MOINS > valeur = < VALUE >  {
	  	return - Integer.parseInt(valeur.image);
	}
	| valeur = < VALUE >  {
	  	return Integer.parseInt(valeur.image);
	}
}