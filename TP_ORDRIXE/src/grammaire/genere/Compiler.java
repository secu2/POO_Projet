/* Generated By:JavaCC: Do not edit this line. Compiler.java */
package grammaire.genere;

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.List;
import java.util.ArrayList;
import grammaire.instructions.*;
import machine.adressage.*;


public class Compiler implements CompilerConstants {

        /** Compilation d'un fichier de combattant 
	* @param s : le nom du fichier 
	* @throws Exception une erreur de lecture 
	*/

        public static void compile(String s) throws Exception {
                FileReader r = new FileReader(s);
                Compiler parser = new Compiler(new BufferedReader(r));
                List < Instruction > code = parser.Instructions();
                //return code;
        }

        private void skiptoEOL(){while(token.kind!=EOL||token.kind!=CEOL) getNextToken();}

//BEGIN RÃ¨gles de grammaire:
  final public List<Instruction> Instructions() throws ParseException, Exception {
        List<Instruction> inst = new ArrayList();
        Instruction courante;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DAT:
      case MOV:
      case ADD:
      case SUB:
      case MUL:
      case DIV:
      case MOD:
      case JMP:
      case JMZ:
      case JMN:
      case DJN:
      case CMP:
      case SLT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      courante = Instruction();
      jj_consume_token(EOL);
      inst.add(courante);
    }
    jj_consume_token(0);
         {if (true) return inst;}
    throw new Error("Missing return statement in function");
  }

  final public Instruction Instruction() throws ParseException, Exception {
  Token operation;  Adresse operande1;  Adresse operande2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DAT:
      operation = jj_consume_token(DAT);
      operande1 = operande();
                {if (true) return new DAT(operande1);}
      break;
    case MOV:
      operation = jj_consume_token(MOV);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new MOV(operande1, operande2);}
      break;
    case ADD:
      operation = jj_consume_token(ADD);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new ADD(operande1, operande2);}
      break;
    case SUB:
      operation = jj_consume_token(SUB);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new SUB(operande1, operande2);}
      break;
    case MUL:
      operation = jj_consume_token(MUL);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new MUL(operande1, operande2);}
      break;
    case DIV:
      operation = jj_consume_token(DIV);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new DIV(operande1, operande2);}
      break;
    case MOD:
      operation = jj_consume_token(MOD);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new MOD(operande1, operande2);}
      break;
    case JMP:
      operation = jj_consume_token(JMP);
      operande1 = operande();
        {if (true) return new JMP(operande1);}
      break;
    case JMZ:
      operation = jj_consume_token(JMZ);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new JMZ(operande1, operande2);}
      break;
    case JMN:
      operation = jj_consume_token(JMN);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new JMN(operande1, operande2);}
      break;
    case DJN:
      operation = jj_consume_token(DJN);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new DJN(operande1, operande2);}
      break;
    case CMP:
      operation = jj_consume_token(CMP);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new CMP(operande1, operande2);}
      break;
    case SLT:
      operation = jj_consume_token(SLT);
      operande1 = operande();
      operande2 = operande();
        {if (true) return new SLT(operande1, operande2);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Adresse operande() throws ParseException {
  Token op;
  Integer val;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMM:
    case NUM:
    case IND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMM:
        op = jj_consume_token(IMM);
        break;
      case NUM:
        op = jj_consume_token(NUM);
        break;
      case IND:
        op = jj_consume_token(IND);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      val = Entier();
    switch (op.kind){
                case IMM : {
                  {if (true) return new Immediat(val);}
                  break;
                }
        case NUM : {
          {if (true) return new Immediat(val);}
          break;
        }
        case IND : {
          {if (true) return new Immediat(val);}
          break;
        }
        }
      break;
    case PLUS:
    case MOINS:
    case VALUE:
      val = Entier();
          {if (true) return new Immediat(val);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Integer Entier() throws ParseException {
  Token valeur, signe;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      valeur = jj_consume_token(VALUE);
        {if (true) return Integer.parseInt(valeur.image);}
      break;
    case MOINS:
      jj_consume_token(MOINS);
      valeur = jj_consume_token(VALUE);
                {if (true) return - Integer.parseInt(valeur.image);}
      break;
    case VALUE:
      valeur = jj_consume_token(VALUE);
                {if (true) return Integer.parseInt(valeur.image);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x38000000,0xf8000000,0xc0000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xfff8,0xfff8,0x0,0x1,0x1,};
   }

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[80];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 80; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
